import BaseEngine from 'engine/BaseEngine.js'
import Tileset from 'engine/Tileset.js'
import World from 'engine/World.js'

export default class Engine extends BaseEngine {
  /* eslint-disable no-multi-spaces, standard/array-bracket-even-spacing */

  load () {
    return [
      this.loader.loadImage('tiles', 'static/tileset.png') // TODO: use constructor config instead of exposing load()
    ]
  }

  init (keys) {
    let tilesets = keys.map((key) => {
      let image = this.loader.getImage(key)

      return new Tileset({
        key,
        image,
        size: [18, 7],
        tileSize: 128
      })
    })

    this.world = new World({
      map: [
        [
          [  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58],
          [  58,  76,  76,  76,  74,  73,   1,   1,   1,  38,  38,  38,   3,   3,   4,  58],
          [  58,  76,  76,  75,  74,   1,   1,   1,   1,  37,  37,  38,   3,   4,   4,  58],
          [  58,  76,  75,  74,  73,   1,   1,   1,   1,   1,  37,  37,  38,  38,  37,  58],
          [  58,  74,  74,  43,   6,   6,  24,   1,   1,   1,  38,  37,  38,  37,  37,  58],
          [  58,  73,   1,   1,   1,   1,   5,   1,   1,   1,  37,  37,  37,  38,  38,  58],
          [  58,   1,   1,   1,   1,   1,   5,   1,   1,   1,  37,  38,  38,  37,  37,  58],
          [  58,   1,   1,   1,   1,   1,  27,   6,   6,  25,   1,  38,  37,  37,  38,  58],
          [  58,   1,   1,   1,   1,   1,   5,   1,   1,   1,   1,   1,  38,  38,  38,  58],
          [  58,   1,   1,   1,   1,   1,   5,   1,   1,   1,   1,   1,   1,  37,  37,  58],
          [  58,   1,   1,  76,   1,   1,   5,   1,   1,   1,   1,   1,   1,   1,   1,  58],
          [  58,   1,   1,   1,   1,   1,  41,   6,   6,   6,   6,  25,   1,   1,   1,  58],
          [  58,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,  58],
          [  58,  22,  22,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,  58],
          [  58,  22,  21,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,  58],
          [  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58,  58]
        ],
        [
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,  35,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,  62,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,  15,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,  33,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,  54,   0, 117,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,  62,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,  62,   0,  64,  52,   0,   0, 119,   0, 114, 115,   0,   0,   0,   0],
          [   0,   0,   0,  63,   0,   0,   0,   0,   0,   0,   0,   0, 101,  83,   0,   0],
          [   0,   0,   0,   0,   0,  81,  51,   0,   0,   0,   0, 116, 101, 101,   0,   0],
          [   0,   0,   0,   0,   0,  99,  81,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]
        ],
        [
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,  53,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]
        ],
        [
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,  72,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
          [   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]
        ]
      ],
      tilesets,
      viewport: {},
      keyboard: {},
      state: {},
      loader: this.loader
    })
  }

  update (delta) {}

  render () {}
}
